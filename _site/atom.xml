<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">

  <head>
  <link href="http://gmpg.org/xfn/11" rel="profile">
  <meta http-equiv="content-type" content="text/html; charset=utf-8">

  <!-- Enable responsiveness on mobile devices-->
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">

  <title>
    
       &middot; Robin
    
  </title>

  <!-- CSS -->
  <link rel="stylesheet" href="/public/css/poole.css">
  <link rel="stylesheet" href="/public/css/syntax.css">
  <link rel="stylesheet" href="/public/css/lanyon.css">
  <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=PT+Serif:400,400italic,700|PT+Sans:400">

  <!-- Icons -->
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/public/apple-touch-icon-144-precomposed.png">
  <link rel="shortcut icon" href="/public/favicon.ico">

  <!-- RSS -->
  <link rel="alternate" type="application/rss+xml" title="RSS" href="/atom.xml">

  <!-- Google Analytics -->
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-146052-15', 'getpoole.com');
    ga('send', 'pageview');
  </script>
</head>


  <body>

    <!-- Target for toggling the sidebar `.sidebar-checkbox` is for regular
     styles, `#sidebar-checkbox` for behavior. -->
<input type="checkbox" class="sidebar-checkbox" id="sidebar-checkbox">

<!-- Toggleable sidebar -->
<div class="sidebar" id="sidebar">
  <div class="sidebar-item">
    <p>My first personal blog</p>
  </div>

  <nav class="sidebar-nav">
    <a class="sidebar-nav-item" href="/">Home</a>

    

    
    
      
        
      
    
      
    
      
        
      
    
      
        
      
    
      
        
      
    
      
        
      
    

      <a class="sidebar-nav-item" href="/valuableBlog">Valuable Blog</a>
      <a class="sidebar-nav-item" href="/aboutLanyon">About Lanyon</a>

  </nav>

  <div class="sidebar-item">
    <p>
      &copy; 2016. All rights reserved.
    </p>
  </div>
</div>


    <!-- Wrap is the content to shift when toggling the sidebar. We wrap the
         content to avoid any CSS collisions with our real content. -->
    <div class="wrap">
      <div class="masthead">
        <div class="container">
          <h3 class="masthead-title">
            <a href="/" title="Home">Robin</a>
            <small>Hi, there</small>
          </h3>
        </div>
      </div>

      <div class="container content">
        <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Robin</title>
 <link href="http://robingg.github.io/atom.xml" rel="self"/>
 <link href="http://robingg.github.io/"/>
 <updated>2016-12-01T23:31:28+08:00</updated>
 <id>http://robingg.github.io</id>
 <author>
   <name>Robin.G</name>
   <email></email>
 </author>

 
 <entry>
   <title>2017美团java工程师笔试编程题</title>
   <link href="http://robingg.github.io/2016/10/12/Meituan-Written-Examination/"/>
   <updated>2016-10-12T00:00:00+08:00</updated>
   <id>http://robingg.github.io/2016/10/12/Meituan-Written-Examination</id>
   <content type="html">&lt;p&gt;在“&lt;a href=&quot;http://group.jobbole.com/23599/#&quot;&gt;伯乐在线&lt;/a&gt;”上看到的一个美团笔试题，解答了一下，顺便把思考过程和答案贴回来。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;题目&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;给定 x, k ，求满足 x + y = x | y 的第 k 小的正整数 y 。 | 是二进制的或(or)运算，例如 3 | 5 = 7。 比如当 x=5，k=1时返回 2，因为5+1=6 不等于 5|1=5，而 5+2=7 等于 5 | 2 = 7。&lt;/p&gt;

&lt;p&gt;输入描述:
每组测试用例仅包含一组数据，每组数据为两个正整数 x , k。 满足 0 &amp;lt; x , k ≤ 2,000,000,000。&lt;/p&gt;

&lt;p&gt;输出描述:
输出一个数y。&lt;/p&gt;

&lt;p&gt;输入例子:
5 1&lt;/p&gt;

&lt;p&gt;输出例子:
2&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;解答&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;我们不妨首先来看看 x + y == x | y 在什么样的条件下成立。&lt;/p&gt;

&lt;p&gt;先看 x = 3, y = 5，转为二进制计算：
0011 + 0101 = 1000
0011 | 0101 = 0111&lt;/p&gt;

&lt;p&gt;其实我们可以发现在对应的某一位上，二进制的加法实际上是在执行“异或”的操作，与“或”操作相比，只有在这一位上都为“1”时，结果不同。
也就是如果 x,y 符合 x + y == x | y，那 x,y 二进制在同一位上必然只有一个有“1”。问题就可以转化为：怎样将 x 二进制里面的“0”，转化为“1”才能获得第 k 小的数？&lt;/p&gt;

&lt;p&gt;当 x = 5, k = 1 时，y 为多少？
我们在 0101 中插入的“1”要尽量小，不妨刨去 0101 中的“1”，剩下全“0”的情况，因为只有“0”才能让我们有机会插入“1”。而第 k 小的数自然就是 k 本身。所以我们得到 k 的二进制表示：01，插回 0101 中的“0”对应的位置得到：0111。这个数就是第 k 小的 x | y。
下一步如何得到 y？还记得我们开始的时候就通过观察发现这是一种特殊情况下的“异或”，所以我们可以将 x 与 x | y 再进行一次“异或”操作就可以得到 y：0010&lt;/p&gt;

&lt;p&gt;ok，思路已经理清楚了。Talk is cheap， show me the code，让我们撸代码吧！&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;cm&quot;&gt;/**
 * Created by Robin on 12/10/2016.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meituan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在编写上面的代码的时候发现一个问题：当 y 为 long，而 x,k 为 int 类型的时候，代码会得到错误的结果。&lt;/p&gt;

&lt;p&gt;这是因为 Java 在对 int 型向 long 自动转型的时候，高位不是自动补 0，而是根据最高位符号位自动补充。就造成了我代码中的错误。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Certification Authority</title>
   <link href="http://robingg.github.io/2016/09/27/Certification-Authority/"/>
   <updated>2016-09-27T00:00:00+08:00</updated>
   <id>http://robingg.github.io/2016/09/27/Certification-Authority</id>
   <content type="html">&lt;p&gt;这几天查了许多关于数字证书认证的问题,记录一下&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;什么是数字证书&lt;/h3&gt;

&lt;p&gt;数字证书被用来证明公钥的所有权，它包含了证书公钥的信息，公钥所有者的信息以及一个数字签名。这个签名是由一个证书颁发机构签署的。如果签名有效并且签署机构是值得信任的话，那这个公钥也就是值得信任的。随后就可以通过公钥来确认通信的信息没有经过篡改。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;数字证书的使用&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/9/96/Usage-of-Digital-Certificate.svg&quot; alt=&quot;数字证书的使用&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片来自 &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/9/96/Usage-of-Digital-Certificate.svg&quot;&gt;wiki-pedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;证书颁发机构（Certificate authorities，CA）是一个第三方机构，他也有公钥私钥对以及带签名的数字证书，不过 CA 的数字证书是用自己的私钥进行的签名，也就是自签名的证书。&lt;/p&gt;

&lt;p&gt;如果我们需要生成值得信任的数字证书，需要先生成一个数字签名请求发给 CA。这个数字签名请求中需要包含我们的公钥并用私钥签名。CA 在确认无误后会用自己的私钥签名并发回签名后的数字证书。之后我们就可以用这个证书与别人通信了。&lt;/p&gt;

&lt;p&gt;在与其他人通信时，除了通信的内容外还会附上我们的数字证书。别人会检查我们数字证书的内容，如果签名的 CA 是他所信任的 CA 的话，就会用我们的公钥进行解密。否则他就会觉得不对劲了。比如我们访问 12306 的时候 chrome 就会矜矜业业地跳出来告诉我这个网站的证书有点问题。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Linux Commands</title>
   <link href="http://robingg.github.io/2016/09/12/Linux-Commands/"/>
   <updated>2016-09-12T00:00:00+08:00</updated>
   <id>http://robingg.github.io/2016/09/12/Linux-Commands</id>
   <content type="html">&lt;p&gt;记录一些自己工作生活中曾经使用过的 Linux 指令，不定期更新。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;man&quot;&gt;man&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#man [command]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一切的一切都要从 man 开始说起，通过它可以打印所有指令的帮助文档。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;help&quot;&gt;help&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#[command] --help&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这不是一个指令，这是一个参数。在我所遇到的大部分指令以及公司开发的脚本中都会提供这个参数。他同样的打印帮助文档。比 man 指令要简洁，并且只要脚本开发者提供了帮助文档，基本也可以通过这个参数打印出来。类似的可以尝试：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#[command] [-h] [-?]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上两者也可以打印，但感觉不像 help 更加的通用&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ln&quot;&gt;ln&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#ln -[Ffhinsv] [source_file] [target_file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;link 指令，用来创建链接文件，链接文件并非实际存在。&lt;/p&gt;

&lt;p&gt;连接文件分为 2 种，硬链接与软链接（符号链接）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;软链接可以理解为文件的一个快捷方式。&lt;/li&gt;
  &lt;li&gt;硬链接则是创建了一个指针指向源文件的内存区域&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ssh&quot;&gt;ssh&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#ssh user@host&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;建立 ssh 通道的指令，最简单与常用的莫过于登录服务器了。&lt;/p&gt;

&lt;p&gt;ssh 还有其他的用法。比如建立 tunnel:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#ssh -L [bind_address:]port:host:hostport&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通过上面的 ssh 指令可以将所有访问 port 端口的请求转发到 host 的 hostport 端口。通过 ssh 建立 tunnel 后可以经由跳板机访问公司内网。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;grep&quot;&gt;grep&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#grep [pattern] [file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;是不是在 man 指令查看了 help 文档以后头昏眼花？在文档里面找一条记录找到放弃？试试 grep 吧！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My First Blog</title>
   <link href="http://robingg.github.io/2016/08/21/first-blog/"/>
   <updated>2016-08-21T00:00:00+08:00</updated>
   <id>http://robingg.github.io/2016/08/21/first-blog</id>
   <content type="html">&lt;h1 id=&quot;welcome&quot;&gt;Welcome!&lt;/h1&gt;

&lt;p&gt;Hello, this is &lt;strong&gt;Robin&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>

      </div>
    </div>

    <label for="sidebar-checkbox" class="sidebar-toggle"></label>

  </body>
</html>
